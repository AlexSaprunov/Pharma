
первоначально я сделал преобразования в powerquery. соединил данные из трех файлов по коду товара, затем избавился от кодов оставил только значения.


[ ]
#импорт библиотек

[ ]
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

[ ]
df = pd.read_csv('/content/drive/MyDrive/Реневал.csv', sep=';')

[ ]
df


[ ]
#Замена типа данных на десятичные
df['Цена'] = df['Цена'].str.replace(',', '.', regex=False)
df['Цена'] = pd.to_numeric(df['Цена'], errors='coerce')

[ ]
#Замена типа данных на десятичные
df['Выручка'] = df['Выручка'].str.replace(',', '.', regex=False)
df['Выручка'] = pd.to_numeric(df['Выручка'], errors='coerce')

[ ]
#Приведем формат на читаемый
pd.set_option('display.float_format', '{:.2f}'.format)

[ ]
df


[ ]
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 344690 entries, 0 to 344689
Data columns (total 9 columns):
 #   Column           Non-Null Count   Dtype  
---  ------           --------------   -----  
 0   Округ            344690 non-null  object 
 1   Регион           344690 non-null  object 
 2   Наименование КП  344686 non-null  object 
 3   Количество       344690 non-null  int64  
 4   Цена             335944 non-null  float64
 5   Выручка          335944 non-null  float64
 6   Период выхода    344686 non-null  object 
 7   Квартал          344690 non-null  object 
 8   Месяц            344690 non-null  object 
dtypes: float64(2), int64(1), object(6)
memory usage: 23.7+ MB

[ ]
df.describe()


[ ]
nan_values = df.isna().sum() # посмотрел солько nan значений в df
duplicates = df.duplicated().sum() # посмотрел есть ли дубликаты и сколько их
unique_values = df.nunique() # посмотрел сколко уникальны значений в df

# создал df со словарем в нутри ключи + значения из переменны, для удобства
columns = pd.DataFrame({
    "nan_values": nan_values,
    "duplicates": duplicates,
    "unique_values": unique_values,
})

columns


[ ]
df = df.dropna() # удаляем пропущенные значения

[ ]
df.info()
<class 'pandas.core.frame.DataFrame'>
Index: 335944 entries, 0 to 344689
Data columns (total 9 columns):
 #   Column           Non-Null Count   Dtype  
---  ------           --------------   -----  
 0   Округ            335944 non-null  object 
 1   Регион           335944 non-null  object 
 2   Наименование КП  335944 non-null  object 
 3   Количество       335944 non-null  int64  
 4   Цена             335944 non-null  float64
 5   Выручка          335944 non-null  float64
 6   Период выхода    335944 non-null  object 
 7   Квартал          335944 non-null  object 
 8   Месяц            335944 non-null  object 
dtypes: float64(2), int64(1), object(6)
memory usage: 25.6+ MB

[ ]
df.describe()

Анализ продаж
Анализ продаж по округам

[ ]
# получил общую сумму по всем продажам для получения процента
total_revenue = df['Выручка'].sum()
# сделал групировку по странам и сумме
country_sales = df.groupby('Округ')['Выручка'].sum().reset_index()
# сортируем
country_sales = country_sales.sort_values(by='Выручка', ascending=True)
# получил процент каждой страны по продажам от общей суммы
country_sales['Процент'] = (country_sales['Выручка'] / total_revenue) * 100

[ ]
# Создал боковую столбчатую диаграмму
plt.figure(figsize=(14, 6))
plt.barh(country_sales['Округ'], country_sales['Процент'], color='skyblue')
plt.xlabel('Процент от общего дохода')
plt.ylabel('Округ')
plt.title('Процентный взнос в разбивке по округам')
plt.xlim(0, 90)
plt.show()


[ ]
country_sales.sort_values(by='Выручка', ascending=False)

Анализ продаж по месяцам

[ ]
# группирую данные по месяцам
monthly_sales = df.groupby(['Месяц'])['Выручка'].sum().reset_index()

# создаю столбца для отображения месяцев в правильном порядке
months_order = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь',
                'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']
monthly_sales['Месяц'] = pd.Categorical(monthly_sales['Месяц'], categories=months_order, ordered=True)

# сортирую данные по месяцу и году
monthly_sales = monthly_sales.sort_values(by=['Месяц'])

[ ]
fig = px.line(monthly_sales, x='Месяц', y='Выручка',
              title='Динамика продаж по месяцам',
              labels={'Выручка': 'Общая выручка'},
              markers=True)


fig.update_layout(xaxis_title='Месяц', yaxis_title='Общая выручка',
                  xaxis_tickangle=-45)


fig.show()


[ ]
monthly_sales['Revenue'] = monthly_sales['Выручка'].pct_change(1) # рассчитали динамику продаж относительно 1 предыдущего значения в процентах

[ ]
monthly_sales

Анализ продаж по кварталам

[ ]
# группирую данные по кварталам
quarter_sales = df.groupby(['Квартал'])['Выручка'].sum().reset_index()

[ ]
fig = px.line(quarter_sales, x='Квартал', y='Выручка',
              title='Динамика продаж по кварталам',
              labels={'Выручка': 'Общая выручка'},
              markers=True)


fig.update_layout(xaxis_title='Месяц', yaxis_title='Общая выручка',
                  xaxis_tickangle=-45)


fig.show()


[ ]
quarter_sales['Revenue'] = quarter_sales['Выручка'].pct_change(1) # рассчитали динамику продаж относительно 1 предыдущего значения в процентах

[ ]
quarter_sales

ABC анализ по товарам.

[ ]
# посчитал продажи по количеству товаров
groupped_df = df.groupby('Наименование КП').agg({'Количество' : 'sum'})
# сделал сортировку
groupped_df = groupped_df.sort_values(by='Количество', ascending=False)
# дополнительная фильтрация для проведения анализа, избавился от отрицательных значений
#groupped_df = groupped_df[groupped_df['Количество'] >= 0]
# рассчитал  долю (Share) каждого товара в общем объёме продаж
groupped_df['Доля'] = groupped_df['Количество'] / groupped_df['Количество'].sum()
# рассчитал сумму накопительным итогом
groupped_df['Накопительная'] = groupped_df['Доля'].cumsum()
# распределил товар по категориям A,B,C
groupped_df['abc'] = np.where(groupped_df['Накопительная'] < 0.8, 'A', np.where(groupped_df['Накопительная'] < 0.95, 'B', 'C'))

groupped_df


[ ]
groupped_df.value_counts(['abc'],normalize=True)*100

Распределил товар согласно правилу Парето, по категориям где:
Категория A (первые 20% товаров): Вклад в продажи: ~80% от общего объема.

Категория B (следующие 15% товаров): Вклад в продажи: ~15%.

Категория C (оставшиеся 65% товаров): Вклад в продажи: ~5%.


[ ]
# группируем по товарам, считаем общий объём продаж
abc_grouped = df.groupby('Наименование КП')['Количество'].sum().reset_index()
abc_grouped = abc_grouped.sort_values('Количество', ascending=False)

# добавляем кумулятивную сумму и долю
abc_grouped['Накопительная'] = abc_grouped['Количество'].cumsum() / abc_grouped['Количество'].sum()
abc_grouped['abc'] = np.where(
    abc_grouped['Накопительная'] < 0.8, 'A',
    np.where(abc_grouped['Накопительная'] < 0.95, 'B', 'C')
)


[ ]
fig = px.bar(                          # визуализация с Plotly
    monthly_abc,
    x='Месяц',
    y='Количество',
    color='abc',
    title='Продажи по ABC-категориям',
    category_orders={'Месяц': months_order}  # дублируем порядок для Plotly
)

fig.show()

Топ 5 товаров категории А.

[ ]
# посмотрим на Топ-5 товаров категории A
groupped_df[groupped_df['abc'] == 'A'].head(5)


[ ]
# отфильтровал Топ-5 товаров категории A (по количеству продаж)
top_a_items = groupped_df[groupped_df['abc'] == 'A'].head(5).index
# отфильтровал исходные данные по этим товарам
df_top_a = df_with_abc[df_with_abc['Наименование КП'].isin(top_a_items)]
# сумма продаж для каждого товара по месяцам
seasonal_top_a = df_top_a.groupby(['Месяц', 'Наименование КП'])['Количество'].sum().reset_index()

# преобразую месяц в категориальный тип для сортировки
seasonal_top_a['Месяц'] = pd.Categorical(
    seasonal_top_a['Месяц'],
    categories=months_order,
    ordered=True
)

# сортирую
seasonal_top_a = seasonal_top_a.sort_values('Месяц')

[ ]
px.line(
    seasonal_top_a,
    x='Месяц',
    y='Количество',
    color='Наименование КП',
    title='Сезонность топ-5 товаров категории A',
    markers=True
).show()


[ ]
heatmap_data = seasonal_top_a.pivot_table(  # создаём сводную таблицу: товары vs месяцы
    index='Наименование КП',
    columns='Месяц',
    values='Количество',
    aggfunc='sum',
    observed=False
)

[ ]
px.imshow(
    heatmap_data,
    labels={'x': 'Месяц', 'y': 'Товар', 'color': 'Продажи'},
    title='Тепловая карта сезонности топ-5 (категория A)',
    color_continuous_scale='Blues'
).show()

Выводы
Из графика можно выделить: доминирующие группы, наиболее ценные сегменты, проблемные зоны.

Проведенный комплексный анализ данных позволил выявить ключевые закономерности в продажах, поведении товарного ассортимента. На основании исследования сформулированы конкретные рекомендации для оптимизации бизнес-процессов и увеличения прибыли.

Ключевые результаты:

Географический анализ

Первые пять регионов генерируют чуть более 50 % прибыли

Сезонность

Пики продаж в марте, сениябре, декабре

Спад в январе , апреле, и июле ABC-анализ

22.64% товаров (категория A) дают 80% выручки

Оценка выполнения поставленных задач:

Оценка динамики продаж

Построены графики динамики, выявлены сезонные тренды

Анализ географического распределения

Определены ключевые рынки, даны рекомендации по оптимизации

ABC-анализ товарного ассортимента

Товары классифицированы, выявлены проблемные позиции

Выявление сезонных трендов

Определены пиковые и спадовые периоды.
